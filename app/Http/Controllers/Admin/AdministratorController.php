<?php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Admin\ResourceController;
use App\Http\Requests\Admin\Administrator\CreateAdministratorRequest;
use App\Http\Requests\Admin\Administrator\UpdateAdministratorRequest;
use App\Models\Administrator;
use App\Models\BaseModel;
use App\Rules\Utf8StringRule;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rule;
use Spatie\Permission\Models\Role;

class AdministratorController extends ResourceController
{
    protected $model = Administrator::class;
    protected $viewPath = 'administrator';
    protected $name = 'Tài khoản quản trị';
    protected $route = 'administrator';

    /**
     * create page
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $this->data['listRole'] = Role::all();
        return parent::create();
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request)
    {
        $this->validate($request,
            (new CreateAdministratorRequest())->rules(),
            [],
            (new CreateAdministratorRequest())->attributes()
        );

        DB::beginTransaction();

        try{
            $data = $request->input();

            $data['password'] = Hash::make($data['password']);

            $admin = $this->model::create($data);

            $admin->syncRoles($request->role);

            DB::commit();

            return response()->json(['success' => true, 'message' => trans('admin.add_success'), 'url' => route('admin.'.$this->route.'.index')]);

        }catch (\Exception $ex){

            DB::rollBack();

            return response()->json(['success' => false,
                'message' => trans('admin.has_an_error_when_create'). '. Exception: '.$ex->getMessage()
            ]);
        }
    }

    /**
     * Edit page
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $this->data['listRole'] = Role::all();
        return parent::edit($id); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @param int $id
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Validation\ValidationException
     */
    public function update(Request $request, $id)
    {
        $record = $this->model::findOrFail($id);

        $updateAdministratorRequest = new UpdateAdministratorRequest();
        $updateAdministratorRequest->setEmail($record->email);
        $this->validate($request,
            $updateAdministratorRequest->rules(),
            [],
            $updateAdministratorRequest->attributes()
        );

        $this->updateData = [
            'name' => $request->name,
            'email' => $record->email,
            'status' => $record->status,
            'avatar'    => $request->avatar
        ];

        if($request->password){
            $this->updateData['password'] = Hash::make($request->password);
        }

        DB::beginTransaction();

        try{
            $this->model::where('id', $record->id)->update($this->updateData);

            $record->syncRoles($request->role);

            DB::commit();

            return response()->json(['success' => true, 'message' => trans('admin.update_success'), 'url' => route('admin.'.$this->route.'.index')]);

        }catch (\Exception $ex){

            DB::rollBack();

            return response()->json([
                'success' => false, 'message' => trans('admin.update_error').'. Exception: '.$ex->getMessage()
            ]);
        }
    }
}
?>