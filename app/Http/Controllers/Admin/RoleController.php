<?php

namespace App\Http\Controllers\Admin;

use App\Http\Requests\Admin\Role\CreateRoleRequest;
use App\Http\Requests\Admin\Role\SearchRoleRequest;
use App\Http\Requests\Admin\Role\UpdateRoleRequest;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Spatie\Permission\Models\Role;

class RoleController extends ResourceController
{
    protected $model = Role::class;
    protected $viewPath = 'role';
    protected $name = 'Nhóm quyền';
    protected $route = 'role';

    /**
     * Create role page
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $this->data['listPermission'] = config('permission.list');
        return parent::create();
    }

    /**
     * Search roles
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \Illuminate\Validation\ValidationException
     * @throws \Throwable
     */
    public function search(Request $request)
    {
        $this->validate($request, (new SearchRoleRequest())->rules(), [], (new SearchRoleRequest())->attributes());

        $listData = Role::paginate(10);
        $html = view('admin.role.search', compact('listData', 'request'));
        return response()->json(['success' => true, 'message' => trans('admin.success'), 'html' => $html->render()]);
    }


    /**
     * Create role post
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request)
    {
        $this->validate($request, (new CreateRoleRequest)->rules(), [], (new CreateRoleRequest())->attributes());

        DB::beginTransaction();

        try {

            $role = Role::create(['name' => $request->name, 'guard_name' => 'admin']);

            $role->syncPermissions($request->permission);

            DB::commit();

            return response()->json([
                'success' => true, 'message' => 'Tạo nhóm quyền thành công',
                'url' => route('admin.role.index')
            ]);

        } catch (\Exception $ex) {

            DB::rollBack();

            return response()->json([
                'success' => false, 'message' => 'Có lỗi trong quá trình tạo nhóm quyền. Lỗi: ' . $ex->getMessage()
            ]);

        }
    }

    /**
     * Edit page
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $this->data['listPermission'] = config('permission.list');
        return parent::edit($id); // TODO: Change the autogenerated stub
    }


    /**
     * Update a role
     *
     * @param Request $request
     * @param int $id
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Validation\ValidationException
     */
    public function update(Request $request, $id)
    {
        $record = $this->model::find($id);
        if (empty($record)) {
            return response()->json(['success' => false, 'message' => trans('admin.record_not_exists')]);
        }

        $this->validate($request,
            (new UpdateRoleRequest())->rules(),
            [],
            (new UpdateRoleRequest())->attributes()
        );

        DB::beginTransaction();
        try{
            $this->updateData = [
                'name' => $request->name
            ];

            $this->model::where('id', $record->id)->update($this->updateData);
            $record->syncPermissions($request->permission);

            DB::commit();

            return response()->json(['success' => true, 'message' => trans('admin.update_success'), 'url' => route('admin.' . $this->route . '.index')]);

        }catch (\Exception $ex) {
            DB::rollBack();
            return response()->json([
                'success' => false, 'message' => 'Có lỗi trong quá trình xử lý. Mời thử lại. Exception: ' . $ex->getMessage()
            ]);
        }

    }
}

?>